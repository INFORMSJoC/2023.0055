Search.setIndex({"titles": ["Crossover operators", "Diversity measures", "Plotting tools", "PyVRP", "Search", "Stopping criteria", "Benchmarking", "Contributing", "Classic VRPs", "A quick tutorial", "Using PyVRP\u2019s components", "Contents", "Benchmarks", "Getting help", "Installation instructions", "A brief introduction to HGS", "A brief introduction to VRP"], "terms": {"The": [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 12, 14, 15, 16], "pyvrp": [0, 1, 2, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16], "modul": [0, 1, 2, 3, 4, 5], "provid": [0, 1, 2, 3, 4, 6, 9, 10, 15], "ar": [0, 1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 16], "respons": [0, 4], "gener": [0, 3, 4, 15], "new": [0, 4, 7, 8, 9, 10, 11, 12, 13, 15], "solut": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 15, 16], "offspr": [0, 3, 4, 8, 10, 15], "from": [0, 1, 3, 4, 6, 7, 8, 9, 10, 11, 13, 15, 16], "two": [0, 1, 3, 4, 6, 8, 10, 15], "parent": [0, 3, 15], "selective_route_exchang": [0, 10], "tupl": [0, 2, 3], "data": [0, 2, 3, 4, 8, 9, 10], "problemdata": [0, 2, 3, 4, 8], "cost_evalu": [0, 3, 4, 10], "costevalu": [0, 3, 4, 10], "rng": [0, 3, 4, 10], "randomnumbergener": [0, 3, 4, 10], "thi": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], "due": [0, 9, 10], "nagata": 0, "kobayashi": 0, "2010": 0, "combin": [0, 8, 15], "rout": [0, 1, 2, 3, 8, 9, 10, 11, 15], "both": [0, 10, 15], "It": [0, 3, 8, 10, 11, 16], "doe": [0, 3], "carefulli": 0, "select": [0, 3, 8, 10, 11, 15], "second": [0, 1, 3, 6, 8, 9, 10], "could": [0, 3, 10], "exchang": [0, 4, 10], "first": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 14, 15], "after": [0, 3, 4, 5, 6, 7, 14, 15], "result": [0, 2, 3, 4, 8, 9, 10, 12, 15], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16], "repair": [0, 3], "us": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15], "greedi": 0, "strategi": [0, 3, 11], "paramet": [0, 1, 2, 3, 4, 5, 10, 16], "creat": [0, 2, 3, 4, 7, 10, 16], "an": [0, 3, 4, 6, 8, 9, 10, 11, 15, 16], "problem": [0, 1, 2, 3, 4, 8, 9, 10, 11, 13, 15], "instanc": [0, 2, 3, 4, 6, 9, 10, 11, 12, 16], "cost": [0, 3, 4, 8, 9, 16], "evalu": [0, 3, 4, 8, 16], "dure": [0, 8], "step": 0, "random": [0, 3, 4, 15], "number": [0, 2, 3, 4, 5, 7, 8], "return": [0, 1, 2, 3, 4, 8, 10, 15, 16], "A": [0, 1, 3, 4, 8, 11], "refer": [0, 4, 6, 15], "1": [0, 1, 2, 3, 4, 8, 9, 10, 12, 16], "y": [0, 2, 3, 8, 9], "": [0, 1, 2, 3, 4, 5, 8, 9, 11, 15], "memet": 0, "algorithm": [0, 1, 2, 3, 4, 8, 11, 15, 16], "pickup": 0, "deliveri": [0, 8, 16], "time": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13], "window": [0, 2, 3, 9, 11], "parallel": 0, "solv": [0, 3, 4, 9, 11, 16], "natur": 0, "ppsn": 0, "xi": 0, "536": 0, "545": 0, "contain": [1, 2, 3, 4, 5, 8, 12, 13, 14], "oper": [1, 3, 10, 11, 15, 16], "determin": [1, 3, 4, 10, 16], "rel": [1, 16], "differ": [1, 3, 4, 6, 8, 10, 11], "between": [1, 3, 4], "object": [1, 2, 3, 4, 6, 8, 9, 10, 15, 16], "popul": [1, 2, 3, 8, 11, 15], "highli": [1, 11], "allow": [1, 3, 8, 10, 11, 15, 16], "genet": [1, 2, 3, 4, 8, 15, 16], "perform": [1, 2, 3, 4, 6, 7, 11, 15], "better": [1, 2, 8, 10, 15], "At": 1, "same": [1, 3, 4, 9, 16], "one": [1, 3, 6, 7, 8, 9, 10, 16], "also": [1, 3, 8, 9, 10, 14, 15, 16], "want": [1, 7, 14], "balanc": [1, 3, 10, 16], "qualiti": [1, 8, 10, 15], "should": [1, 3, 6, 7, 8], "good": [1, 8, 9, 10], "That": [1, 3, 10], "maintain": [1, 7, 11, 15], "comput": [1, 3, 4, 6, 8, 10, 16], "fit": [1, 3, 15], "score": [1, 6], "each": [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 16], "which": [1, 2, 3, 4, 7, 8, 10, 15, 16], "valu": [1, 2, 3, 8, 9, 12, 15], "broken_pairs_dist": [1, 10], "_pyvrp": [1, 3], "float": [1, 2, 3, 4, 5], "symmetr": [1, 4], "broken": 1, "pair": [1, 3, 4], "distanc": [1, 2, 3, 8, 9, 16], "bpd": 1, "given": [1, 2, 3, 4, 5, 9, 15, 16], "function": [1, 2, 3, 7, 8], "whether": [1, 2, 3, 4], "client": [1, 2, 3, 4, 6, 8, 9, 10, 11, 16], "share": [1, 4], "neighbour": [1, 3, 4, 10], "If": [1, 3, 7, 11, 15], "part": [1, 3, 8, 10], "link": 1, "other": [1, 4], "formal": 1, "f": [1, 8], "let": [1, 3, 8, 9, 10], "p_f": [1, 3], "p_": 1, "preced": 1, "depot": [1, 2, 3, 4, 8, 9, 16], "ldot": 1, "n": [1, 4, 6, 8, 15, 16], "respect": [1, 3, 10], "similarli": [1, 3], "defin": [1, 4, 8, 9, 10], "s_f": 1, "s_": [1, 8, 15, 16], "succeed": 1, "Then": [1, 7, 14], "we": [1, 3, 6, 7, 8, 9, 10, 14, 15, 16], "have": [1, 2, 3, 7, 8, 9, 10, 11, 13, 14, 16], "text": 1, "frac": 1, "sum_": [1, 3], "1_": 1, "ne": 1, "2n": 1, "our": [1, 4, 7, 8, 9, 10], "definit": [1, 10], "direct": 1, "2": [1, 3, 4, 6, 8, 9, 10, 12, 16], "3": [1, 3, 8, 9, 10, 12], "4": [1, 3, 6, 8, 9, 10, 12], "consid": [1, 4, 16], "complet": [1, 3, 7, 8, 11, 16], "0": [1, 2, 3, 4, 8, 9, 10, 12, 16], "indic": [1, 3, 4, 8], "percentag": [1, 3, 12], "suggest": [1, 15], "maxim": 1, "zero": [1, 3], "thei": [1, 4, 10, 16], "variou": [2, 3, 5, 8, 11, 15, 16], "those": [2, 4, 6, 9, 10], "These": [2, 3, 5, 6, 7, 8, 10, 12], "can": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16], "understand": [2, 10], "your": [2, 3, 6, 7, 13, 14], "help": [2, 3, 6, 7, 11], "investig": [2, 10], "plot_coordin": [2, 8, 9], "titl": [2, 8], "str": [2, 3], "coordin": [2, 3, 8], "ax": [2, 8, 9], "none": [2, 3, 16], "option": [2, 3, 6, 11, 14, 16], "add": [2, 3, 4, 7, 10, 15], "draw": [2, 3], "One": [2, 7], "plot_demand": 2, "demand": [2, 3, 4, 8, 9, 11, 16], "vertic": [2, 3, 8], "bar": [2, 8], "sort": 2, "plot_divers": 2, "divers": [2, 3, 8, 10, 11, 15], "statist": [2, 3, 8], "plot_inst": [2, 8], "fig": [2, 8, 10], "figur": [2, 8, 10], "plot_object": 2, "num_to_skip": 2, "int": [2, 3, 4, 5, 10], "ylim_adjust": 2, "95": [2, 8, 10], "15": [2, 8, 9, 10], "subpopul": 2, "initi": [2, 3, 10, 15], "iter": [2, 3, 5, 8, 9, 10, 15], "skip": 2, "when": [2, 3, 4, 5, 7, 8, 10, 16], "earli": [2, 8], "often": [2, 3, 7, 16], "veri": [2, 3, 4, 8, 10], "high": [2, 3, 10, 15], "obscur": 2, "what": [2, 7, 8], "go": [2, 8, 10, 14, 16], "later": [2, 3, 8], "search": [2, 3, 5, 8, 11, 15, 16], "default": [2, 3, 4, 10], "5": [2, 8, 9, 10], "bound": 2, "axi": [2, 8], "best": [2, 3, 5, 6, 8, 9, 10, 12, 15], "where": [2, 3, 8, 14, 16], "denot": [2, 8, 16], "found": [2, 3, 8, 15, 16], "feasibl": [2, 3, 8, 10, 16], "plot_result": [2, 8, 10], "run": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13], "includ": [2, 3, 4, 7, 8, 11, 13, 16], "detail": [2, 3, 7, 8, 10, 12], "about": [2, 6, 7, 8, 10, 13], "underli": 2, "plot_route_schedul": [2, 8], "legend": [2, 8], "bool": [2, 3, 4], "true": [2, 3, 4], "schedul": 2, "multipl": 2, "travel": [2, 3, 8, 9, 16], "solid": 2, "earliest": [2, 3, 8, 16], "possibl": [2, 3, 7, 16], "trajectori": 2, "warp": [2, 3, 4], "infeas": [2, 3, 8, 10], "shade": 2, "slack": [2, 3, 8], "up": [2, 10, 11, 14], "latest": [2, 3, 8, 14, 16], "onli": [2, 3, 4, 7, 14, 15], "dash": 2, "dot": [2, 8, 15, 16], "drive": [2, 8], "servic": [2, 3, 8, 11, 16], "exclud": [2, 3], "wait": [2, 3, 4, 8, 16], "pure": 2, "grei": [2, 8], "background": [2, 8], "remain": [2, 8], "load": [2, 3, 8], "vehicl": [2, 3, 8, 9, 11, 15], "list": [2, 3, 4, 8, 10, 11, 12, 16], "whose": [2, 3], "show": [2, 8, 10], "plot_runtim": 2, "runtim": [2, 3, 5, 6, 8, 9, 10], "plot_solut": [2, 9], "plot_client": 2, "fals": [2, 3, 4], "plot_time_window": 2, "top": [3, 8, 10], "level": [3, 10], "expos": 3, "sever": [3, 8, 9, 10], "core": [3, 6], "class": [3, 4, 5, 7], "need": [3, 4, 7, 9, 10, 13, 14, 15], "vrp": [3, 9, 10, 11, 15], "solver": [3, 8, 11, 16], "geneticalgorithm": [3, 4, 5, 10], "manag": [3, 8, 11], "pool": 3, "most": [3, 7, 14, 16], "take": [3, 6, 7, 10, 13, 14, 15], "advanc": 3, "configur": [3, 4, 7, 8, 12], "sensibl": 3, "final": [3, 8, 10], "obtain": [3, 12, 15, 16], "observ": [3, 8, 10], "look": [3, 8, 9, 10, 11], "exampl": [3, 5, 7, 8, 9, 10, 16], "see": [3, 7, 8, 9, 10, 12, 15, 16], "how": [3, 4, 7, 8, 9, 10, 12], "relat": 3, "model": [3, 8, 9, 10], "simpl": [3, 16], "interfac": [3, 6, 8, 9, 10], "attribut": [3, 4, 7], "locat": [3, 8, 9, 16], "all": [3, 4, 5, 7, 8, 9, 10, 14, 16], "current": [3, 4, 8, 10, 11, 16], "vehicle_typ": 3, "type": [3, 7], "method": [3, 4, 5, 7, 8, 15, 16], "properti": 3, "index": [3, 14], "vehicletyp": 3, "classmethod": 3, "from_data": [3, 8], "construct": [3, 10], "feed": 3, "repres": [3, 4, 8, 12, 16], "add_client": [3, 9], "x": [3, 6, 8, 9], "service_dur": [3, 8], "tw_earli": [3, 9], "tw_late": [3, 9], "release_tim": 3, "prize": [3, 11], "requir": [3, 7, 9, 11, 16], "add_depot": [3, 9], "yet": [3, 10, 14], "support": [3, 7, 8, 9, 11], "multi": 3, "For": [3, 6, 7, 8, 10, 15, 16], "now": [3, 7, 8, 9, 10, 14], "ad": [3, 4, 7, 10, 15], "add_edg": [3, 9], "frm": [3, 9], "durat": [3, 4, 8, 9, 11], "edg": [3, 4, 9, 10], "j": [3, 4, 8, 16], "rais": [3, 4], "valueerror": [3, 4], "either": 3, "neg": 3, "add_vehicle_typ": [3, 9], "capac": [3, 8, 9, 11, 16], "num_avail": [3, 9], "avail": [3, 4, 6, 8, 10, 16], "posit": [3, 4], "stop": [3, 8, 9, 10, 11, 15], "stoppingcriterion": [3, 5, 10], "seed": [3, 6, 8, 10, 12], "criterion": [3, 5, 8, 10, 15], "prng": 3, "store": 3, "connect": 3, "geneticalgorithmparam": 3, "repair_prob": 3, "8": [3, 8, 9, 10], "nb_iter_no_improv": 3, "20000": 3, "probabl": 3, "repar": 3, "make": [3, 4, 7, 10, 14], "without": [3, 5, 11], "ani": [3, 7], "improv": [3, 4, 5, 10, 15], "befor": [3, 4, 8, 10, 16], "restart": 3, "occur": 3, "penalty_manag": 3, "penaltymanag": [3, 10], "search_method": 3, "searchmethod": [3, 4], "crossover_op": 3, "crossoveroper": 3, "initial_solut": 3, "collect": [3, 8, 11], "param": [3, 4], "describ": [3, 4, 10], "penalti": [3, 10], "crossov": [3, 4, 11, 15], "initialis": [3, 6, 15], "empti": [3, 4, 10], "until": [3, 10, 15], "penaltyparam": 3, "init_capacity_penalti": 3, "20": [3, 7, 8, 10, 12], "init_time_warp_penalti": 3, "6": [3, 8, 9, 10], "repair_boost": 3, "12": [3, 8, 9, 10], "num_registrations_between_penalty_upd": 3, "50": [3, 8, 10], "penalty_increas": 3, "34": [3, 8, 10], "penalty_decreas": 3, "32": [3, 8, 10, 12], "target_feas": 3, "43": [3, 8, 10, 12], "excess": 3, "amount": [3, 4, 13], "unit": 3, "penalis": 3, "start": [3, 4, 8, 10, 15, 16], "violat": 3, "booster": 3, "r": 3, "ge": [3, 8, 16], "temporarili": 3, "multipli": 3, "term": [3, 10], "forc": 3, "get_booster_cost_evalu": 3, "registr": 3, "updat": [3, 14], "everi": [3, 7, 15], "onc": [3, 7, 14, 16], "while": [3, 7, 11, 16], "base": [3, 8, 10], "recent": [3, 7, 12], "control": [3, 4], "p_i": [3, 16], "increas": [3, 9, 10], "insuffici": 3, "been": [3, 5, 11, 16], "amongst": 3, "v": [3, 4, 8, 16], "get": [3, 6, 14, 15], "p_d": 3, "decreas": 3, "suffici": [3, 10], "target": 3, "last": 3, "regist": [3, 15], "too": [3, 7, 8, 10], "mani": [3, 10, 16], "ensur": [3, 4, 10, 15], "fraction": 3, "histori": 3, "temporari": 3, "short": [3, 13], "register_load_feas": 3, "is_load_feas": 3, "anoth": 3, "gather": 3, "boolean": 3, "wa": [3, 4], "w": 3, "t": 3, "constraint": [3, 16], "register_time_feas": 3, "is_time_feas": 3, "get_cost_evalu": [3, 10], "boost": 3, "populationparam": 3, "generation_s": 3, "lb_divers": 3, "max_pop_s": 3, "min_pop_s": 3, "nb_close": 3, "nb_elit": 3, "ub_divers": 3, "diversity_op": 3, "callabl": 3, "pairwis": 3, "__iter__": 3, "over": [3, 10, 12, 15], "yield": 3, "__len__": 3, "size": [3, 4, 15], "num_feas": [3, 10], "num_infeas": [3, 10], "survivor": [3, 10, 15], "automat": [3, 7], "trigger": 3, "reach": [3, 10, 15], "its": [3, 10], "maximum": [3, 5, 15, 16], "clear": [3, 7, 10], "remov": [3, 15], "k": [3, 15, 16], "non": [3, 4, 5], "ident": 3, "tournament": [3, 15], "subject": [3, 7], "restrict": [3, 9, 10], "binari": [3, 11], "get_tourna": 3, "ari": [3, 15], "intern": [3, 8, 10], "read": [3, 10, 11], "pathlib": 3, "path": 3, "instance_format": [3, 8], "vrplib": [3, 8], "round_func": [3, 8], "numpi": [3, 7], "ndarrai": 3, "no_round": 3, "file": [3, 7, 8, 12], "assum": [3, 6, 8, 16], "format": [3, 8], "solomon": [3, 8, 10], "round": [3, 8], "Will": 3, "appli": [3, 15], "alreadi": 3, "integ": [3, 4], "string": 3, "nearest": [3, 8], "trunc": 3, "truncat": [3, 8], "integr": [3, 8], "trunc1": [3, 8, 10], "dimac": [3, 8, 12], "scale": [3, 6], "decim": [3, 8], "typeerror": 3, "name": [3, 12], "inform": [3, 13], "read_solut": [3, 8], "stat": 3, "num_iter": 3, "outcom": 3, "singl": [3, 6], "total": [3, 8, 9, 16], "main": [3, 8], "loop": [3, 15], "inf": 3, "is_feas": [3, 10], "otherwis": 3, "show_vers": [3, 13], "print": [3, 8, 9, 10], "version": [3, 7, 12, 13, 14], "bug": 3, "report": [3, 12], "call": [3, 8, 10], "like": [3, 8, 14], "follow": [3, 4, 7, 8, 9, 10, 13, 15, 16], "depend": [3, 14], "local": [3, 4, 10, 11, 15, 16], "instal": [3, 6, 11, 13], "import": [3, 4, 8, 9, 10, 13], "24": [3, 8, 10], "matplotlib": [3, 8, 9, 10], "7": [3, 8, 9, 10], "tqdm": 3, "64": [3, 8, 10], "tomli": 3, "python": [3, 11, 13, 14], "9": [3, 8, 9, 10, 12], "13": [3, 8, 9, 10, 12], "factori": 3, "feas_stat": 3, "_datum": 3, "infeas_stat": 3, "track": [3, 6, 7, 8, 10, 12], "analys": 3, "collect_from": 3, "from_csv": 3, "delimit": 3, "kwarg": [3, 4, 5], "csv": 3, "filesystem": 3, "separ": [3, 8, 10], "comma": 3, "addit": [3, 9, 10, 16], "keyword": 3, "argument": [3, 4, 7, 8], "pass": [3, 4, 8], "dictread": 3, "to_csv": 3, "quot": 3, "write": 3, "necessari": [3, 7], "dictwrit": 3, "capacity_penalti": [3, 10], "tw_penalti": [3, 10], "self": [3, 13], "hand": 3, "wave": 3, "some": [3, 4, 5, 7, 8, 10, 16], "x_": 3, "ij": [3, 8, 16], "encod": 3, "y_i": 3, "visit": [3, 8, 11, 16], "d_": [3, 8, 16], "unvisit": 3, "load_penalti": 3, "penalised_cost": [3, 10], "smooth": 3, "time_warp": [3, 8], "plan": 3, "centroid": 3, "center": [3, 4], "point": [3, 15], "end_tim": 3, "end": [3, 8, 16], "equival": 3, "start_tim": 3, "excess_load": 3, "has_excess_load": 3, "has_time_warp": 3, "leav": 3, "releas": [3, 7, 11], "than": [3, 7, 8, 15], "unless": 3, "ha": [3, 5, 6, 7, 8, 9, 11, 14, 15, 16], "departur": 3, "delai": 3, "minim": 3, "mai": [3, 6, 12, 16], "introduc": [3, 16], "longer": 3, "more": [3, 4, 7, 8, 9, 10, 15, 16], "alwai": [3, 7], "turn": 3, "incur": 3, "travel_dur": 3, "wait_dur": [3, 8], "In": [3, 8, 10, 15, 16], "case": [3, 4, 8], "latter": 3, "assign": 3, "runtimeerror": 3, "invalid": 3, "wai": [3, 10, 14], "particular": 3, "exce": [3, 15, 16], "num_vehicl": 3, "get_neighbour": [3, 4], "itself": 3, "pred": 3, "succ": 3, "predecessor": 3, "successor": 3, "get_rout": [3, 8], "decis": 3, "implicit": 3, "is_complet": 3, "shorthand": 3, "check": [3, 7, 16], "make_random": [3, 10], "randomli": 3, "num_client": 3, "num_rout": 3, "uncollected_pr": 3, "uncollect": 3, "horizont": 3, "necessarili": [3, 4], "within": [3, 16], "interv": 3, "must": [3, 4, 5, 7, 8, 16], "associ": 3, "distance_matrix": 3, "duration_matrix": [3, 9], "overal": [3, 4], "horizon": 3, "matrix": [3, 4], "give": [3, 8], "num_vehicle_typ": 3, "retriev": 3, "request": [3, 7, 16], "dist": 3, "accord": 3, "implement": [3, 4, 5, 10, 11, 15, 16], "xor": 3, "shift": 3, "pseudo": 3, "next": 3, "sequenc": 3, "repeatedli": 3, "exclus": 3, "bit": 3, "here": [3, 8, 9, 10], "set": [3, 6, 8, 10, 11, 14, 15, 16], "state": [3, 11, 16], "__call__": 3, "max": 3, "min": 3, "rand": 3, "randint": 3, "except": 3, "emptysolutionwarn": 3, "being": 3, "forbidden": 3, "per": 3, "se": 3, "odd": 3, "scalingwarn": 3, "larg": [3, 4, 8, 10], "caus": 3, "well": [3, 8, 10], "newli": 4, "happen": [4, 5], "just": [4, 9, 10], "localsearch": [4, 10], "protocol": [4, 5], "arg": [4, 5], "explor": [4, 15], "granular": [4, 11], "neighbourhood": [4, 10, 11], "effici": [4, 15, 16], "manner": 4, "user": [4, 11], "quickli": [4, 6, 8, 10], "much": [4, 8, 10], "add_node_oper": [4, 10], "op": 4, "nodeoper": 4, "add_route_oper": [4, 10], "routeoper": 4, "intensifi": 4, "expens": 4, "set_neighbour": 4, "conveni": [4, 8, 9], "replac": 4, "overlap_toler": 4, "05": 4, "To": [4, 6, 8, 10, 11, 13, 14], "limit": [4, 6, 13, 16], "intensif": 4, "move": [4, 10], "effort": 4, "overlap": 4, "angl": 4, "neighbourhoodparam": 4, "weight_wait_tim": 4, "weight_time_warp": 4, "nb_granular": 4, "40": [4, 8, 10], "symmetric_proxim": 4, "symmetric_neighbour": 4, "calcul": 4, "weight": [4, 8, 16], "minimum": [4, 15], "aspect": [4, 8, 11], "proxim": 4, "far": [4, 10, 15], "apart": 4, "symmetris": 4, "structur": 4, "so": [4, 9, 10, 14, 15], "note": 4, "compute_neighbour": [4, 10], "element": 4, "via": [4, 7, 11, 14], "inherit": [4, 15], "As": [4, 16], "node_oper": [4, 10], "exchange10": 4, "m": [4, 9], "exhang": 4, "consecut": 4, "u": [4, 7, 8, 10], "reloc": 4, "swap": 4, "special": 4, "c": [4, 7, 13, 15], "templat": [4, 7, 13], "exchange20": 4, "exchange30": 4, "exchange11": 4, "exchange21": 4, "exchange31": 4, "exchange22": 4, "exchange32": 4, "exchange33": 4, "movetwoclientsrevers": 4, "twoopt": 4, "route_oper": [4, 10], "relocatestar": 4, "swapstar": 4, "free": [4, 7, 13], "form": [4, 10], "re": [4, 9, 10], "insert": 4, "place": [4, 7, 8, 13], "fairli": 4, "close": [4, 9, 10], "thibaut": 4, "vidal": [4, 15], "2022": [4, 15], "hybrid": [4, 10, 15], "cvrp": [4, 6, 8, 11, 12, 16], "open": [4, 7, 8, 11, 13, 14, 16], "sourc": [4, 7, 11], "neighborhood": 4, "140": [4, 8], "http": [4, 7, 14], "doi": 4, "org": 4, "10": [4, 8, 9, 10], "1016": 4, "cor": 4, "2021": 4, "105643": 4, "packag": [5, 10, 11, 12, 14], "ship": 5, "whenev": [5, 7], "met": [5, 10, 15], "exceed": 5, "maxiter": [5, 8, 10], "max_iter": 5, "maxruntim": [5, 8, 9, 10], "max_runtim": 5, "specifi": [5, 9, 10, 13, 16], "noimprov": 5, "fix": 5, "timednoimprov": 5, "whichev": 5, "command": [6, 7, 13], "line": [6, 7, 8, 13], "find": [6, 8, 9, 10, 16], "out": [6, 10, 16], "mostli": 6, "crvplib": 6, "particularli": 6, "uchoa": 6, "cpu": 6, "passmark": 6, "2183": 6, "thu": [6, 11], "100": [6, 8, 10], "ran": 6, "240": [6, 8, 9], "vrptw": [6, 10, 12, 16], "gehr": [6, 8], "homberg": [6, 8], "1000": [6, 8, 10], "custom": [6, 8, 16], "hour": 6, "2000": [6, 8], "pc": [6, 12, 16], "modifi": [6, 9], "ten": [6, 12], "averag": [6, 8, 10, 12], "compar": [6, 9], "known": [6, 8, 10, 12], "repositori": [6, 7, 12, 13, 14], "gap": [6, 8, 12], "submodul": 6, "git": [6, 7, 14], "init": [6, 10], "convers": [7, 13], "develop": [7, 13, 16], "issu": [7, 13], "github": [7, 13, 14], "feel": [7, 13], "you": [7, 9, 11, 13, 14, 15], "someth": [7, 13], "discuss": [7, 13], "sure": [7, 14], "reason": 7, "modern": 7, "compil": [7, 11], "standard": [7, 8], "do": [7, 9, 10, 13, 16], "proce": 7, "fork": 7, "websit": 7, "clone": [7, 14], "environ": [7, 14], "com": [7, 14], "usernam": 7, "directori": 7, "virtual": [7, 14], "poetri": [7, 14], "cd": [7, 14], "pip": [7, 11, 14], "upgrad": [7, 14], "doc": 7, "dev": 7, "might": [7, 11, 14], "few": [7, 8, 10, 14], "minut": [7, 14], "done": [7, 10, 14], "everyth": [7, 10, 14], "smoothli": 7, "execut": 7, "test": 7, "suit": 7, "pytest": 7, "pre": [7, 11], "simpli": [7, 14], "style": 7, "featur": [7, 15], "branch": [7, 16], "written": 7, "built": 7, "mode": 7, "typic": 7, "debug": 7, "made": [7, 14], "build_extens": 7, "py": 7, "script": 7, "directli": [7, 11, 14], "discov": 7, "meson": 7, "system": 7, "root": 7, "touch": 7, "handl": [7, 8], "pull": 7, "accept": 7, "meet": 7, "below": [7, 11, 12], "greatli": 7, "reduc": 7, "job": 7, "softwar": 7, "cheap": 7, "easi": [7, 11], "merg": 7, "delet": 7, "click": 7, "avoid": 7, "temptat": 7, "lump": 7, "bunch": 7, "unrel": 7, "work": [7, 10, 15], "keep": 7, "prepar": 7, "messag": 7, "concis": 7, "mean": [7, 16], "less": 7, "80": [7, 8, 9, 10], "charact": 7, "blank": 7, "bodi": 7, "code": [7, 13], "submiss": 7, "document": [7, 8, 9, 10, 11], "docstr": 7, "conform": 7, "edit": 7, "appropri": [7, 8], "pars": [7, 8], "correctli": 7, "pleas": [7, 11, 13], "notebook": [8, 9, 10, 14, 16], "variant": [8, 9, 11], "build": [8, 10, 11], "tutori": [8, 11, 15], "plot": [8, 9, 10, 11], "tool": [8, 9, 10, 11], "diagnost": 8, "graph": [8, 16], "g": [8, 16], "vertex": [8, 16], "arc": [8, 16], "partit": [8, 16], "cup": [8, 16], "v_c": [8, 16], "q_": [8, 16], "minimis": [8, 9, 16], "addition": [8, 10], "incorpor": 8, "sake": 8, "exposit": 8, "t_": [8, 16], "equal": 8, "hard": [8, 9, 16], "left": [8, 10, 16], "e_i": [8, 16], "l_i": [8, 16], "right": [8, 10, 16], "arriv": [8, 16], "begin": [8, 16], "h": [8, 16], "pyplot": [8, 9, 10], "plt": [8, 9, 10], "tabul": 8, "n439": 8, "k37": 8, "wide": 8, "benchmark": [8, 10, 11, 16], "convert": 8, "euclidean": 8, "convent": 8, "bk": 8, "sol": [8, 10], "_": [8, 9, 10], "subplot": [8, 9], "figsiz": [8, 9, 10], "tight_layout": [8, 10], "again": [8, 9, 10], "instanti": [8, 10], "42": [8, 10], "37": [8, 10], "438": 8, "36802": 8, "00": [8, 9, 10], "583": 8, "217": 8, "236": 8, "105": 8, "434": 8, "311": 8, "169": 8, "348": 8, "260": 8, "26": [8, 10], "370": 8, "133": 8, "425": 8, "223": 8, "349": 8, "410": 8, "267": 8, "386": 8, "299": 8, "400": [8, 9], "97": [8, 10], "411": 8, "414": 8, "326": 8, "155": 8, "92": [8, 10], "275": 8, "41": [8, 10], "406": 8, "270": 8, "308": 8, "202": 8, "149": 8, "172": 8, "71": [8, 10], "335": 8, "72": [8, 10], "239": 8, "218": 8, "347": 8, "211": 8, "421": 8, "245": 8, "422": 8, "281": 8, "375": 8, "296": 8, "57": [8, 10], "392": 8, "139": 8, "200": [8, 10], "145": 8, "122": 8, "418": 8, "206": 8, "250": 8, "228": [8, 9], "346": 8, "162": 8, "435": 8, "166": 8, "345": 8, "385": 8, "312": 8, "381": 8, "404": 8, "195": 8, "242": 8, "241": 8, "303": 8, "110": 8, "409": 8, "388": 8, "225": 8, "86": [8, 10], "315": 8, "352": 8, "264": 8, "372": 8, "233": 8, "420": 8, "396": 8, "423": 8, "391": 8, "337": 8, "433": 8, "377": 8, "380": 8, "268": 8, "229": 8, "324": 8, "193": 8, "428": 8, "293": 8, "89": [8, 10], "17": [8, 10], "403": 8, "384": 8, "366": 8, "416": 8, "407": 8, "412": 8, "83": [8, 10], "285": 8, "252": 8, "101": 8, "402": 8, "339": 8, "66": [8, 10], "126": 8, "297": 8, "309": 8, "338": 8, "271": 8, "257": 8, "11": [8, 9, 10, 12], "44": [8, 10], "243": 8, "321": 8, "413": 8, "432": 8, "351": 8, "266": 8, "329": 8, "319": 8, "289": 8, "253": 8, "383": 8, "437": 8, "323": 8, "246": 8, "138": 8, "376": 8, "47": [8, 10], "286": 8, "350": 8, "341": 8, "98": [8, 10], "137": 8, "251": 8, "79": [8, 10], "130": 8, "88": [8, 10], "173": 8, "118": 8, "91": [8, 10], "215": 8, "153": 8, "159": 8, "283": 8, "14": [8, 9, 10], "65": [8, 10], "154": 8, "197": 8, "344": 8, "61": [8, 10], "189": 8, "431": 8, "144": 8, "334": 8, "25": [8, 10, 12], "146": 8, "131": 8, "210": 8, "22": [8, 10, 12], "56": [8, 10], "75": [8, 10], "196": 8, "116": 8, "113": 8, "274": 8, "16": [8, 9, 10], "204": 8, "31": [8, 10], "176": 8, "426": 8, "367": 8, "134": 8, "58": [8, 10], "207": 8, "333": 8, "387": 8, "397": 8, "62": [8, 10], "90": [8, 10], "109": 8, "371": 8, "390": 8, "184": 8, "395": 8, "287": 8, "361": 8, "161": 8, "18": [8, 9, 10, 12], "401": 8, "343": 8, "389": 8, "327": 8, "340": 8, "108": 8, "330": 8, "19": [8, 10], "248": 8, "430": 8, "28": [8, 10, 12], "331": 8, "220": 8, "408": 8, "302": 8, "255": 8, "152": 8, "177": 8, "135": 8, "157": 8, "73": [8, 10], "175": 8, "165": 8, "84": [8, 10], "181": 8, "21": [8, 10, 12], "378": 8, "112": 8, "67": [8, 10], "230": 8, "132": 8, "265": 8, "313": 8, "103": 8, "117": 8, "63": [8, 10], "74": [8, 10], "354": 8, "209": 8, "244": 8, "292": 8, "364": 8, "259": 8, "30": [8, 10], "222": 8, "310": 8, "178": 8, "291": 8, "160": [8, 9], "174": 8, "382": 8, "192": 8, "235": 8, "23": [8, 10, 12], "190": 8, "125": 8, "171": 8, "394": 8, "379": 8, "301": 8, "123": 8, "272": 8, "328": 8, "81": [8, 10], "179": 8, "96": [8, 10], "256": 8, "78": [8, 10], "182": 8, "216": 8, "106": 8, "399": 8, "77": [8, 10], "99": [8, 10], "124": 8, "332": 8, "269": 8, "120": 8, "316": 8, "114": [8, 9], "279": 8, "213": 8, "424": 8, "300": 8, "290": 8, "368": 8, "417": 8, "356": 8, "363": 8, "357": 8, "214": 8, "198": 8, "52": [8, 10], "168": 8, "405": 8, "234": 8, "188": 8, "369": 8, "27": [8, 10], "170": 8, "183": 8, "205": 8, "150": 8, "284": 8, "320": [8, 9], "273": 8, "224": 8, "282": 8, "219": 8, "142": 8, "163": 8, "151": 8, "232": 8, "336": 8, "419": 8, "304": [8, 9], "322": 8, "374": 8, "208": 8, "141": 8, "35": [8, 10], "39": [8, 10], "199": 8, "29": [8, 10], "53": [8, 10], "128": 8, "186": 8, "164": 8, "51": [8, 10], "54": [8, 10], "45": [8, 10, 12], "277": 8, "111": 8, "48": [8, 10], "85": [8, 10], "148": [8, 9], "314": 8, "306": 8, "107": 8, "180": 8, "38": [8, 10], "167": 8, "203": 8, "247": 8, "201": 8, "46": [8, 10], "212": 8, "94": [8, 10], "49": [8, 10], "69": [8, 10], "68": [8, 10], "262": 8, "261": 8, "129": 8, "191": 8, "158": 8, "87": [8, 10], "102": 8, "127": 8, "119": 8, "76": [8, 10], "33": [8, 10], "226": 8, "278": 8, "93": [8, 10], "258": 8, "307": 8, "436": 8, "373": 8, "36": [8, 10], "194": 8, "156": 8, "427": 8, "415": 8, "398": 8, "317": 8, "276": 8, "355": 8, "429": 8, "365": 8, "359": 8, "295": 8, "358": 8, "82": [8, 10], "147": 8, "143": 8, "60": [8, 10], "104": 8, "70": [8, 10], "185": 8, "294": 8, "318": 8, "298": 8, "231": 8, "59": [8, 10], "136": 8, "187": 8, "362": 8, "305": 8, "238": 8, "288": 8, "55": [8, 10], "263": 8, "254": 8, "353": 8, "249": 8, "325": 8, "121": 8, "237": 8, "393": 8, "280": 8, "360": 8, "342": [8, 9], "221": 8, "227": 8, "115": 8, "1f": 8, "wors": 8, "36391": 8, "ve": 8, "optimis": 8, "consist": [8, 10, 16], "increasingli": 8, "Of": 8, "cours": 8, "similar": 8, "littl": 8, "gain": 8, "overview": 8, "bottom": [8, 10], "basic": 8, "challeng": 8, "rc208": [8, 10], "impress": 8, "produc": 8, "plot_": 8, "api": [8, 9, 10], "7761": [8, 10], "optim": [8, 9, 16], "776": 8, "inspect": [8, 9], "num_stop": 8, "len": [8, 9, 10], "header": 8, "kei": 8, "row": 8, "datum": 8, "tablefmt": 8, "html": 8, "2187": 8, "2700": 8, "465": 8, "1983": 8, "2400": 8, "1325": 8, "1700": 8, "2266": 8, "3200": 8, "592": 8, "actual": 8, "jump": 8, "semi": 8, "transpar": 8, "region": 8, "truck": 8, "axarr": 8, "idx": [8, 9], "enumer": [8, 9], "zip": 8, "reshap": 8, "largest": 8, "rc2_10_5": 8, "30963": 8, "25797": 8, "moreov": 8, "demonstr": 8, "visualis": 8, "procedur": [8, 15], "brief": [9, 11], "small": 9, "capacit": [9, 11], "OR": 9, "6208": 9, "fmt": 9, "off": [9, 10], "coord": 9, "456": 9, "912": 9, "570": 9, "798": 9, "684": 9, "480": 9, "560": 9, "640": 9, "full": 9, "descript": 9, "rang": [9, 10], "ab": 9, "manhattan": 9, "readi": [9, 10], "attain": 9, "besid": 9, "unlik": 9, "still": [9, 10], "impos": 9, "aim": 9, "time_window": 9, "999": 9, "unrestrict": 9, "along": [9, 10], "frm_idx": 9, "to_idx": 9, "6596": 9, "01": 9, "slightli": 9, "conclud": 9, "know": 9, "cover": 9, "introduct": [9, 11], "page": [9, 11, 12, 14, 15], "reli": 10, "hide": 10, "lot": 10, "under": 10, "hood": 10, "own": 10, "match": 10, "signatur": 10, "def": 10, "process": 10, "continu": [10, 15], "condit": 10, "becaus": 10, "easiest": 10, "customis": [10, 11], "space": [10, 15], "benefici": 10, "By": 10, "faster": 10, "l": [10, 15], "node_op": 10, "route_op": 10, "assert": 10, "79611": 10, "further": [10, 15], "new_sol": 10, "8462": 10, "But": 10, "hammer": 10, "8833": 10, "pretti": 10, "adjust": 10, "down": 10, "charg": 10, "ask": 10, "saw": 10, "abov": 10, "pen_manag": 10, "nearli": 10, "tackl": [10, 16], "pop": 10, "dissimilar": 10, "recal": 10, "easili": [10, 11], "init_sol": 10, "srex": 10, "algo": 10, "criteria": [10, 11, 15], "iter_r": 10, "500": 10, "time_r": 10, "7772": 10, "02": 10, "put": 10, "learn": 10, "togeth": 10, "pm": 10, "period": 10, "spike": 10, "grow": 10, "bad": 10, "purg": 10, "middl": 10, "sub": 10, "progress": 10, "altogeth": 10, "scheme": 10, "modular": 10, "reus": 10, "art": [11, 16], "hg": [11, 12], "redesign": 11, "speed": 11, "inspir": 11, "come": 11, "mac": 11, "o": [11, 15], "linux": 11, "through": 11, "metaheurist": [11, 16], "benefit": 11, "yourself": 11, "instruct": [11, 12], "quick": 11, "classic": 11, "compon": 11, "measur": 11, "contribut": 11, "tabl": 12, "signific": 12, "config": 12, "toml": 12, "date": 12, "juli": 12, "2023": 12, "februari": 12, "triag": 13, "snippet": 13, "reproduc": 13, "output": [13, 15], "straightforward": 14, "project": 14, "group": 14, "goe": 14, "resolv": 14, "jupyt": 14, "browser": 14, "navig": 14, "folder": 14, "global": 15, "capabl": 15, "fine": 15, "tune": 15, "approach": 15, "effect": [15, 16], "exploit": 15, "lead": 15, "thorough": 15, "paper": 15, "et": 15, "al": 15, "2013": 15, "input": 15, "exist": 15, "favour": 15, "higher": 15, "candid": 15, "upon": 15, "mechan": 15, "least": 15, "back": 15, "pseudocod": 15, "s_1": 15, "repeat": 15, "p_1": 15, "p_2": 15, "xo": 15, "lowest": [15, 16], "studi": 16, "field": 16, "research": 16, "motiv": 16, "applic": 16, "postal": 16, "wast": 16, "overarch": 16, "goal": 16, "fulfil": 16, "transport": 16, "enorm": 16, "potenti": 16, "save": 16, "primari": 16, "focu": 16, "consider": 16, "complex": 16, "classifi": 16, "np": 16, "heurist": 16, "exact": 16, "cut": 16, "primarili": 16, "guarante": 16, "rigor": 16, "them": 16, "vrpsolvereasi": 16, "section": 16, "extens": 16, "toth": 16, "vigo": 16, "2014": 16, "e": 16, "fleet": 16, "homogen": 16, "q": 16, "exactli": 16, "mandatori": 16, "compet": 16, "maximis": 16}, "objects": {"": [[3, 0, 0, 1, "pyvrp", ""]], "pyvrp": [[3, 0, 0, 1, "GeneticAlgorithm", ""], [3, 0, 0, 1, "Model", ""], [3, 0, 0, 1, "PenaltyManager", ""], [3, 0, 0, 1, "Population", ""], [3, 0, 0, 1, "Result", ""], [3, 0, 0, 1, "Statistics", ""], [3, 0, 0, 1, "_pyvrp", ""], [0, 0, 0, 1, "crossover", ""], [1, 0, 0, 1, "diversity", ""], [3, 0, 0, 1, "exceptions", ""], [2, 0, 0, 1, "plotting", ""], [3, 0, 0, 1, "read", ""], [4, 0, 0, 1, "search", ""], [3, 0, 0, 1, "show_versions", ""], [5, 0, 0, 1, "stop", ""]], "pyvrp.GeneticAlgorithm": [[3, 1, 1, 0, "GeneticAlgorithm", "Creates a GeneticAlgorithm instance."], [3, 1, 1, 0, "GeneticAlgorithmParams", "Parameters for the genetic algorithm."]], "pyvrp.GeneticAlgorithm.GeneticAlgorithm": [[3, 2, 1, 0, "run", "Runs the genetic algorithm with the provided stopping criterion."]], "pyvrp.Model": [[3, 1, 1, 0, "Edge", "Stores an edge connecting two locations."], [3, 1, 1, 0, "Model", "A simple interface for modelling vehicle routing problems with PyVRP."]], "pyvrp.Model.Model": [[3, 2, 1, 0, "add_client", "Adds a client with the given attributes to the model. Returns the created Client instance."], [3, 2, 1, 0, "add_depot", "Adds a depot with the given attributes to the model. Returns the created Client instance."], [3, 2, 1, 0, "add_edge", "Adds an edge (i, j) between frm (i) and to (j). The edge can be given distance and duration attributes. Distance is required, but the default duration is zero. Returns the created edge."], [3, 2, 1, 0, "add_vehicle_type", "Adds a vehicle type with the given number of available vehicles of given capacity to the model. Returns the created vehicle type."], [3, 2, 1, 0, "data", "Creates and returns a ProblemData instance from this model's attributes."], [3, 2, 1, 0, "from_data", "Constructs a model instance from the given data."], [3, 3, 1, 0, "locations", "Returns all locations (depots and clients) in the current model. The clients in the routes of the solution returned by solve() can be used to index these locations."], [3, 2, 1, 0, "solve", "Solve this model."], [3, 3, 1, 0, "vehicle_types", "Returns the vehicle types in the current model. The routes of the solution returned by solve() have a property vehicle_type() that can be used to index these vehicle types."]], "pyvrp.PenaltyManager": [[3, 1, 1, 0, "PenaltyManager", "Creates a PenaltyManager instance."], [3, 1, 1, 0, "PenaltyParams", "The penalty manager parameters."]], "pyvrp.PenaltyManager.PenaltyManager": [[3, 2, 1, 0, "get_booster_cost_evaluator", "Get a cost evaluator for the boosted current penalty values."], [3, 2, 1, 0, "get_cost_evaluator", "Get a cost evaluator for the current penalty values."], [3, 2, 1, 0, "register_load_feasible", "Registers another capacity feasibility result. The current load penalty is updated once sufficiently many results have been gathered."], [3, 2, 1, 0, "register_time_feasible", "Registers another time feasibility result. The current time warp penalty is updated once sufficiently many results have been gathered."]], "pyvrp.Population": [[3, 1, 1, 0, "Population", "Creates a Population instance."], [3, 1, 1, 0, "PopulationParams", "Attributes  generation_size    lb_diversity    max_pop_size    min_pop_size    nb_close    nb_elite    ub_diversity    !! processed by numpydoc !!"]], "pyvrp.Population.Population": [[3, 2, 1, 0, "__iter__", "Iterates over the solutions contained in this population."], [3, 2, 1, 0, "__len__", "Returns the current population size."], [3, 2, 1, 0, "add", "Adds the given solution to the population. Survivor selection is automatically triggered when the population reaches its maximum size."], [3, 2, 1, 0, "clear", "Clears the population by removing all solutions currently in the population."], [3, 2, 1, 0, "get_tournament", "Selects a solution from this population by k-ary tournament, based on the (internal) fitness values of the selected solutions."], [3, 2, 1, 0, "num_feasible", "Returns the number of feasible solutions in the population."], [3, 2, 1, 0, "num_infeasible", "Returns the number of infeasible solutions in the population."], [3, 2, 1, 0, "select", "Selects two (if possible non-identical) parents by tournament, subject to a diversity restriction."]], "pyvrp.Result": [[3, 1, 1, 0, "Result", "Stores the outcomes of a single run. An instance of this class is returned once the GeneticAlgorithm completes."]], "pyvrp.Result.Result": [[3, 2, 1, 0, "cost", "Returns the cost (objective) value of the best solution. Returns inf if the best solution is infeasible."], [3, 2, 1, 0, "is_feasible", "Returns whether the best solution is feasible."]], "pyvrp.Statistics": [[3, 1, 1, 0, "Statistics", "The Statistics object tracks various (population-level) statistics of genetic algorithm runs. This can be helpful in analysing the algorithm's performance."]], "pyvrp.Statistics.Statistics": [[3, 2, 1, 0, "collect_from", "Collects statistics from the given population object."], [3, 2, 1, 0, "from_csv", "Reads a Statistics object from the CSV file at the given filesystem location."], [3, 2, 1, 0, "to_csv", "Writes this Statistics object to the given location, as a CSV file."]], "pyvrp._pyvrp": [[3, 1, 1, 0, "Client", "Simple data object storing all client data as (read-only) properties."], [3, 1, 1, 0, "CostEvaluator", "Creates a CostEvaluator instance."], [3, 1, 1, 0, "ProblemData", "Creates a problem data instance. This instance contains all information needed to solve the vehicle routing problem."], [3, 1, 1, 0, "RandomNumberGenerator", "This class implements a XOR-shift pseudo-random number generator (RNG). It generates the next number of a sequence by repeatedly taking the 'exclusive or' (the ^ operator) of a number with a bit-shifted version of itself. See here for more details."], [3, 1, 1, 0, "Route", "A simple class that stores the route plan and some statistics."], [3, 1, 1, 0, "Solution", "Encodes VRP solutions."], [3, 1, 1, 0, "VehicleType", "Simple data object storing all vehicle type data as properties."]], "pyvrp._pyvrp.CostEvaluator": [[3, 2, 1, 0, "cost", "Evaluates and returns the cost/objective of the given solution. Hand-waving some details, let x_{ij} \\in \\{ 0, 1 \\} indicate if edge (i, j) is used in the solution encoded by the given solution, and y_i \\in \\{ 0, 1 \\} indicate if client i is visited. The objective is then given by"], [3, 2, 1, 0, "load_penalty", "Computes the total excess capacity penalty for the given load."], [3, 2, 1, 0, "penalised_cost", "Computes a smoothed objective (penalised cost) for a given solution."], [3, 2, 1, 0, "tw_penalty", "Computes the time warp penalty for the given time warp."]], "pyvrp._pyvrp.ProblemData": [[3, 2, 1, 0, "centroid", "Center point of all client locations (excluding the depot)."], [3, 2, 1, 0, "client", "Returns client data for the given client."], [3, 2, 1, 0, "dist", "Returns the travel distance between the first and second argument, according to this instance's travel distance matrix."], [3, 2, 1, 0, "duration", "Returns the travel duration between the first and second argument, according to this instance's travel duration matrix."], [3, 3, 1, 0, "num_clients", "Number of clients in this problem instance."], [3, 3, 1, 0, "num_vehicle_types", "Number of vehicles in this problem instance."], [3, 3, 1, 0, "num_vehicles", "Number of vehicle types in this problem instance."], [3, 2, 1, 0, "vehicle_type", "Returns vehicle type data for the given vehicle type."]], "pyvrp._pyvrp.RandomNumberGenerator": [[3, 2, 1, 0, "__call__", "!! processed by numpydoc !!"], [3, 2, 1, 0, "max", "!! processed by numpydoc !!"], [3, 2, 1, 0, "min", "!! processed by numpydoc !!"], [3, 2, 1, 0, "rand", "!! processed by numpydoc !!"], [3, 2, 1, 0, "randint", "!! processed by numpydoc !!"]], "pyvrp._pyvrp.Route": [[3, 2, 1, 0, "centroid", "Center point of the client locations on this route."], [3, 2, 1, 0, "demand", "Total client demand on this route."], [3, 2, 1, 0, "distance", "Total distance travelled on this route."], [3, 2, 1, 0, "duration", "Total route duration, including travel, service and waiting time."], [3, 2, 1, 0, "end_time", "End time of the route. This is equivalent to start_time + duration - time_warp."], [3, 2, 1, 0, "excess_load", "Demand in excess of the vehicle's capacity."], [3, 2, 1, 0, "has_excess_load", "!! processed by numpydoc !!"], [3, 2, 1, 0, "has_time_warp", "!! processed by numpydoc !!"], [3, 2, 1, 0, "is_feasible", "!! processed by numpydoc !!"], [3, 2, 1, 0, "prizes", "Total prize value collected on this route."], [3, 2, 1, 0, "release_time", "Earliest time at which this route can leave the depot. Follows from the release times of clients visited on this route."], [3, 2, 1, 0, "service_duration", "Total duration of service on this route."], [3, 2, 1, 0, "slack", "Time by which departure from the depot can be delayed without resulting in (additional) time warp or increased route duration."], [3, 2, 1, 0, "start_time", "Start time of this route. This is the earliest possible time at which the route can leave the depot and have a minimal duration and time warp. If there is positive slack(), the start time can be delayed by at most slack() time units without increasing the total (minimal) route duration, or time warp."], [3, 2, 1, 0, "time_warp", "Amount of time warp incurred on this route."], [3, 2, 1, 0, "travel_duration", "Total duration of travel on this route."], [3, 2, 1, 0, "vehicle_type", "Index of the type of vehicle used on this route."], [3, 2, 1, 0, "visits", "Route visits, as a list of clients."], [3, 2, 1, 0, "wait_duration", "Total waiting duration on this route."]], "pyvrp._pyvrp.Solution": [[3, 2, 1, 0, "distance", "Returns the total distance over all routes."], [3, 2, 1, 0, "excess_load", "Returns the total excess load over all routes."], [3, 2, 1, 0, "get_neighbours", "Returns a list of neighbours for each client, by index. Also includes the depot at index 0, which only neighbours itself."], [3, 2, 1, 0, "get_routes", "The solution's routing decisions."], [3, 2, 1, 0, "has_excess_load", "Returns whether this solution violates capacity constraints."], [3, 2, 1, 0, "has_time_warp", "Returns whether this solution violates time window constraints."], [3, 2, 1, 0, "is_complete", "Returns whether this solution is complete, which it is when it has all required clients."], [3, 2, 1, 0, "is_feasible", "Whether this solution is feasible. This is a shorthand for checking has_excess_load(), has_time_warp(), and is_complete()."], [3, 2, 1, 0, "make_random", "data: ProblemData, rng: RandomNumberGenerator,"], [3, 2, 1, 0, "num_clients", "Number of clients in this solution."], [3, 2, 1, 0, "num_routes", "Number of routes in this solution."], [3, 2, 1, 0, "prizes", "Returns the total collected prize value over all routes."], [3, 2, 1, 0, "time_warp", "Returns the total time warp load over all routes."], [3, 2, 1, 0, "uncollected_prizes", "Total prize value of all clients not visited in this solution."]], "pyvrp.crossover": [[0, 0, 0, 1, "selective_route_exchange", ""]], "pyvrp.crossover.selective_route_exchange": [[0, 4, 1, 0, "selective_route_exchange", "This crossover operator due to Nagata and Kobayashi (2010) combines routes from both parents to generate a new offspring solution. It does this by carefully selecting routes from the second parent that could be exchanged with routes from the first parent. After exchanging these routes, the resulting offspring solution is repaired using a greedy repair strategy."]], "pyvrp.diversity": [[1, 0, 0, 1, "_diversity", ""]], "pyvrp.diversity._diversity": [[1, 4, 1, 0, "broken_pairs_distance", "Computes the symmetric broken pairs distance (BPD) between the given two solutions. This function determines whether each client in the problem shares neighbours between the first and second solution. If not, the client is part of a 'broken pair': a link that is part of one solution, but not of the other."]], "pyvrp.exceptions": [[3, 5, 1, 0, "EmptySolutionWarning", "Raised when an empty solution is being added to the Population. This is not forbidden, per se, but very odd."], [3, 5, 1, 0, "ScalingWarning", "Raised when the distance or duration values in the problem are very large, which could cause the algorithm to start using forbidden edges as well."]], "pyvrp.plotting": [[2, 0, 0, 1, "plot_coordinates", ""], [2, 0, 0, 1, "plot_demands", ""], [2, 0, 0, 1, "plot_diversity", ""], [2, 0, 0, 1, "plot_instance", ""], [2, 0, 0, 1, "plot_objectives", ""], [2, 0, 0, 1, "plot_result", ""], [2, 0, 0, 1, "plot_route_schedule", ""], [2, 0, 0, 1, "plot_runtimes", ""], [2, 0, 0, 1, "plot_solution", ""], [2, 0, 0, 1, "plot_time_windows", ""]], "pyvrp.plotting.plot_coordinates": [[2, 4, 1, 0, "plot_coordinates", "Plots coordinates for clients and depot."]], "pyvrp.plotting.plot_demands": [[2, 4, 1, 0, "plot_demands", "Plots demands for clients, as vertical bars sorted by demand."]], "pyvrp.plotting.plot_diversity": [[2, 4, 1, 0, "plot_diversity", "Plots population diversity statistics."]], "pyvrp.plotting.plot_instance": [[2, 4, 1, 0, "plot_instance", "Plots client coordinate, time window and demand data of the given instance."]], "pyvrp.plotting.plot_objectives": [[2, 4, 1, 0, "plot_objectives", "Plots each subpopulation's objective values."]], "pyvrp.plotting.plot_result": [[2, 4, 1, 0, "plot_result", "Plots the results of a run, including the best solution and detailed statistics about the algorithm's performance."]], "pyvrp.plotting.plot_route_schedule": [[2, 4, 1, 0, "plot_route_schedule", "Plots a route schedule. This function plots multiple time statistics as a function of distance travelled:"]], "pyvrp.plotting.plot_runtimes": [[2, 4, 1, 0, "plot_runtimes", "Plots iteration runtimes."]], "pyvrp.plotting.plot_solution": [[2, 4, 1, 0, "plot_solution", "Plots the given solution."]], "pyvrp.plotting.plot_time_windows": [[2, 4, 1, 0, "plot_time_windows", "Plots client time windows, as vertical bars sorted by time window."]], "pyvrp.read": [[3, 4, 1, 0, "read", "Reads the VRPLIB file at the given location, and returns a ProblemData instance."], [3, 4, 1, 0, "read_solution", "Reads a solution in VRPLIB format from file at the given location, and returns the routes contained in it."]], "pyvrp.search": [[4, 0, 0, 1, "LocalSearch", ""], [4, 0, 0, 1, "SearchMethod", ""], [4, 0, 0, 1, "_search", ""], [4, 0, 0, 1, "neighbourhood", ""]], "pyvrp.search.LocalSearch": [[4, 1, 1, 0, "LocalSearch", "Local search method. This search method explores a granular neighbourhood in a very efficient manner using user-provided node and route operators. This quickly results in much improved solutions."]], "pyvrp.search.LocalSearch.LocalSearch": [[4, 2, 1, 0, "add_node_operator", "Adds a node operator to this local search object. The node operator will be used by search() to improve a solution."], [4, 2, 1, 0, "add_route_operator", "Adds a route operator to this local search object. The route operator will be used by intensify() to improve a solution using more expensive route operators."], [4, 2, 1, 0, "get_neighbours", "Returns the granular neighbourhood currently used by the local search."], [4, 2, 1, 0, "intensify", "This method uses the intensifying route operators on this local search object to improve the given solution. To limit the computational demands of intensification, the  overlap_tolerance argument can be used to limit the number of route pairs that are evaluated."], [4, 2, 1, 0, "search", "This method uses the node operators on this local search object to improve the given solution."], [4, 2, 1, 0, "set_neighbours", "Convenience method to replace the current granular neighbourhood used by the local search object."]], "pyvrp.search.SearchMethod": [[4, 1, 1, 0, "SearchMethod", "Protocol that search methods must implement."]], "pyvrp.search._search": [[4, 1, 1, 0, "Exchange10", "The (N, M)-exchange operators exhange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [4, 1, 1, 0, "Exchange11", "The (N, M)-exchange operators exhange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [4, 1, 1, 0, "Exchange20", "The (N, M)-exchange operators exhange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [4, 1, 1, 0, "Exchange21", "The (N, M)-exchange operators exhange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [4, 1, 1, 0, "Exchange22", "The (N, M)-exchange operators exhange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [4, 1, 1, 0, "Exchange30", "The (N, M)-exchange operators exhange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [4, 1, 1, 0, "Exchange31", "The (N, M)-exchange operators exhange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [4, 1, 1, 0, "Exchange32", "The (N, M)-exchange operators exhange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [4, 1, 1, 0, "Exchange33", "The (N, M)-exchange operators exhange N consecutive clients from U's route (starting at U) with M consecutive clients from V's route (starting at V). This includes the RELOCATE and SWAP operators as special cases."], [4, 1, 1, 0, "MoveTwoClientsReversed", "!! processed by numpydoc !!"], [4, 1, 1, 0, "NodeOperator", "!! processed by numpydoc !!"], [4, 1, 1, 0, "RelocateStar", "!! processed by numpydoc !!"], [4, 1, 1, 0, "RouteOperator", "!! processed by numpydoc !!"], [4, 1, 1, 0, "SwapStar", "Explores the SWAP* neighbourhood of [1]. The SWAP* neighbourhood explores free form re-insertions of clients U and V in the given routes (so the clients are exchanged between routes, but they are not necessarily inserted in the place of the other exchanged client). Our implementation of the SWAP* neighbourhood follows Algorithm 2 of [1] fairly closely."], [4, 1, 1, 0, "TwoOpt", "!! processed by numpydoc !!"]], "pyvrp.search.neighbourhood": [[4, 1, 1, 0, "NeighbourhoodParams", "Configuration for calculating a granular neighbourhood."], [4, 4, 1, 0, "compute_neighbours", "Computes neighbours defining the neighbourhood for a problem instance."]], "pyvrp.show_versions": [[3, 4, 1, 0, "show_versions", "This function prints version information that is useful when filing bug reports."]], "pyvrp.stop": [[5, 0, 0, 1, "MaxIterations", ""], [5, 0, 0, 1, "MaxRuntime", ""], [5, 0, 0, 1, "NoImprovement", ""], [5, 0, 0, 1, "StoppingCriterion", ""], [5, 0, 0, 1, "TimedNoImprovement", ""]], "pyvrp.stop.MaxIterations": [[5, 1, 1, 0, "MaxIterations", "Criterion that stops after a maximum number of iterations."]], "pyvrp.stop.MaxRuntime": [[5, 1, 1, 0, "MaxRuntime", "Criterion that stops after a specified maximum runtime."]], "pyvrp.stop.NoImprovement": [[5, 1, 1, 0, "NoImprovement", "Criterion that stops if the best solution has not been improved for a fixed number of iterations."]], "pyvrp.stop.StoppingCriterion": [[5, 1, 1, 0, "StoppingCriterion", "Protocol that stopping criteria must implement."]], "pyvrp.stop.TimedNoImprovement": [[5, 1, 1, 0, "TimedNoImprovement", "Stopping criterion that stops after a given number of iterations without improvement, or after a fixed runtime (whichever happens first)."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"crossov": [0, 10], "oper": [0, 4], "divers": 1, "measur": 1, "note": [1, 3, 7, 15, 16], "plot": 2, "tool": 2, "pyvrp": [3, 10, 11, 12], "hint": [3, 11, 15, 16], "warn": 3, "search": [4, 10], "node": 4, "rout": [4, 16], "stop": 5, "criteria": 5, "benchmark": [6, 12], "contribut": 7, "set": 7, "up": 7, "local": [7, 14], "instal": [7, 14], "build": 7, "python": 7, "extens": 7, "commit": 7, "chang": 7, "classic": 8, "vrp": [8, 12, 16], "The": [8, 10], "capacit": [8, 16], "read": 8, "instanc": 8, "solv": [8, 10], "time": [8, 16], "window": [8, 16], "larger": 8, "vrptw": 8, "conclus": [8, 10], "A": [9, 10, 15, 16], "quick": 9, "tutori": 9, "us": 10, "": 10, "compon": 10, "tour": 10, "random": 10, "number": 10, "gener": 10, "method": 10, "solut": 10, "represent": 10, "evalu": 10, "popul": 10, "manag": 10, "genet": 10, "algorithm": 10, "function": 10, "content": 11, "get": [11, 13], "start": 11, "exampl": [11, 14], "api": 11, "refer": [11, 12], "develop": 11, "solver": 12, "help": 13, "submit": 13, "bug": 13, "report": 13, "instruct": 14, "from": 14, "sourc": 14, "run": 14, "brief": [15, 16], "introduct": [15, 16], "hg": 15, "support": 16, "variant": 16, "vehicl": 16, "problem": 16, "prize": 16, "collect": 16}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "nbsphinx": 4, "sphinx": 58}, "alltitles": {"Crossover operators": [[0, "crossover-operators"]], "Diversity measures": [[1, "diversity-measures"]], "Note": [[1, null], [3, null], [3, null], [7, null], [7, null], [15, null], [16, null]], "Plotting tools": [[2, "plotting-tools"]], "PyVRP": [[3, "pyvrp"], [12, "pyvrp"]], "Hint": [[3, null], [11, null], [15, null], [16, null]], "Warning": [[3, null]], "Search": [[4, "search"]], "Node operators": [[4, "node-operators"]], "Route operators": [[4, "route-operators"]], "Stopping criteria": [[5, "stopping-criteria"]], "Benchmarking": [[6, "benchmarking"]], "Contributing": [[7, "contributing"]], "Setting up a local installation": [[7, "setting-up-a-local-installation"]], "Building the Python extensions": [[7, "building-the-python-extensions"]], "Committing changes": [[7, "committing-changes"]], "Classic VRPs": [[8, "Classic-VRPs"]], "The capacitated VRP": [[8, "The-capacitated-VRP"]], "Reading the instance": [[8, "Reading-the-instance"], [8, "id1"]], "Solving the instance": [[8, "Solving-the-instance"], [8, "id2"]], "The VRP with time windows": [[8, "The-VRP-with-time-windows"]], "Solving a larger VRPTW instance": [[8, "Solving-a-larger-VRPTW-instance"]], "Conclusion": [[8, "Conclusion"], [10, "Conclusion"]], "A quick tutorial": [[9, "A-quick-tutorial"]], "Using PyVRP\u2019s components": [[10, "Using-PyVRP's-components"]], "A tour of PyVRP": [[10, "A-tour-of-PyVRP"]], "Random number generator": [[10, "Random-number-generator"]], "Search method": [[10, "Search-method"]], "Solution representation and evaluation": [[10, "Solution-representation-and-evaluation"]], "Population management": [[10, "Population-management"]], "The genetic algorithm and crossover": [[10, "The-genetic-algorithm-and-crossover"]], "The solve function": [[10, "The-solve-function"]], "Contents": [[11, "contents"]], "Getting started": [[11, null]], "Examples": [[11, null]], "API reference": [[11, null]], "Developing PyVRP": [[11, null]], "Benchmarks": [[12, "benchmarks"]], "Reference VRP solvers": [[12, "reference-vrp-solvers"]], "Getting help": [[13, "getting-help"]], "Submitting a bug report": [[13, "submitting-a-bug-report"]], "Installation instructions": [[14, "installation-instructions"]], "Installing from source": [[14, "installing-from-source"]], "Running the examples locally": [[14, "running-the-examples-locally"]], "A brief introduction to HGS": [[15, "a-brief-introduction-to-hgs"]], "A brief introduction to VRP": [[16, "a-brief-introduction-to-vrp"]], "Supported VRP variants": [[16, "supported-vrp-variants"]], "Capacitated vehicle routing problem": [[16, "capacitated-vehicle-routing-problem"]], "Vehicle routing problem with time windows": [[16, "vehicle-routing-problem-with-time-windows"]], "Prize-collecting vehicle routing problem": [[16, "prize-collecting-vehicle-routing-problem"]]}, "indexentries": {"module": [[0, "module-pyvrp.crossover"], [0, "module-pyvrp.crossover.selective_route_exchange"], [1, "module-pyvrp.diversity"], [1, "module-pyvrp.diversity._diversity"], [2, "module-pyvrp.plotting"], [2, "module-pyvrp.plotting.plot_coordinates"], [2, "module-pyvrp.plotting.plot_demands"], [2, "module-pyvrp.plotting.plot_diversity"], [2, "module-pyvrp.plotting.plot_instance"], [2, "module-pyvrp.plotting.plot_objectives"], [2, "module-pyvrp.plotting.plot_result"], [2, "module-pyvrp.plotting.plot_route_schedule"], [2, "module-pyvrp.plotting.plot_runtimes"], [2, "module-pyvrp.plotting.plot_solution"], [2, "module-pyvrp.plotting.plot_time_windows"], [3, "module-pyvrp"], [3, "module-pyvrp.GeneticAlgorithm"], [3, "module-pyvrp.Model"], [3, "module-pyvrp.PenaltyManager"], [3, "module-pyvrp.Population"], [3, "module-pyvrp.Result"], [3, "module-pyvrp.Statistics"], [3, "module-pyvrp._pyvrp"], [3, "module-pyvrp.exceptions"], [3, "module-pyvrp.read"], [3, "module-pyvrp.show_versions"], [4, "module-pyvrp.search"], [4, "module-pyvrp.search.LocalSearch"], [4, "module-pyvrp.search.SearchMethod"], [4, "module-pyvrp.search._search"], [4, "module-pyvrp.search.neighbourhood"], [5, "module-pyvrp.stop"], [5, "module-pyvrp.stop.MaxIterations"], [5, "module-pyvrp.stop.MaxRuntime"], [5, "module-pyvrp.stop.NoImprovement"], [5, "module-pyvrp.stop.StoppingCriterion"], [5, "module-pyvrp.stop.TimedNoImprovement"]], "pyvrp.crossover": [[0, "module-pyvrp.crossover"]], "pyvrp.crossover.selective_route_exchange": [[0, "module-pyvrp.crossover.selective_route_exchange"]], "selective_route_exchange() (in module pyvrp.crossover.selective_route_exchange)": [[0, "pyvrp.crossover.selective_route_exchange.selective_route_exchange"]], "broken_pairs_distance() (in module pyvrp.diversity._diversity)": [[1, "pyvrp.diversity._diversity.broken_pairs_distance"]], "pyvrp.diversity": [[1, "module-pyvrp.diversity"]], "pyvrp.diversity._diversity": [[1, "module-pyvrp.diversity._diversity"]], "plot_coordinates() (in module pyvrp.plotting.plot_coordinates)": [[2, "pyvrp.plotting.plot_coordinates.plot_coordinates"]], "plot_demands() (in module pyvrp.plotting.plot_demands)": [[2, "pyvrp.plotting.plot_demands.plot_demands"]], "plot_diversity() (in module pyvrp.plotting.plot_diversity)": [[2, "pyvrp.plotting.plot_diversity.plot_diversity"]], "plot_instance() (in module pyvrp.plotting.plot_instance)": [[2, "pyvrp.plotting.plot_instance.plot_instance"]], "plot_objectives() (in module pyvrp.plotting.plot_objectives)": [[2, "pyvrp.plotting.plot_objectives.plot_objectives"]], "plot_result() (in module pyvrp.plotting.plot_result)": [[2, "pyvrp.plotting.plot_result.plot_result"]], "plot_route_schedule() (in module pyvrp.plotting.plot_route_schedule)": [[2, "pyvrp.plotting.plot_route_schedule.plot_route_schedule"]], "plot_runtimes() (in module pyvrp.plotting.plot_runtimes)": [[2, "pyvrp.plotting.plot_runtimes.plot_runtimes"]], "plot_solution() (in module pyvrp.plotting.plot_solution)": [[2, "pyvrp.plotting.plot_solution.plot_solution"]], "plot_time_windows() (in module pyvrp.plotting.plot_time_windows)": [[2, "pyvrp.plotting.plot_time_windows.plot_time_windows"]], "pyvrp.plotting": [[2, "module-pyvrp.plotting"]], "pyvrp.plotting.plot_coordinates": [[2, "module-pyvrp.plotting.plot_coordinates"]], "pyvrp.plotting.plot_demands": [[2, "module-pyvrp.plotting.plot_demands"]], "pyvrp.plotting.plot_diversity": [[2, "module-pyvrp.plotting.plot_diversity"]], "pyvrp.plotting.plot_instance": [[2, "module-pyvrp.plotting.plot_instance"]], "pyvrp.plotting.plot_objectives": [[2, "module-pyvrp.plotting.plot_objectives"]], "pyvrp.plotting.plot_result": [[2, "module-pyvrp.plotting.plot_result"]], "pyvrp.plotting.plot_route_schedule": [[2, "module-pyvrp.plotting.plot_route_schedule"]], "pyvrp.plotting.plot_runtimes": [[2, "module-pyvrp.plotting.plot_runtimes"]], "pyvrp.plotting.plot_solution": [[2, "module-pyvrp.plotting.plot_solution"]], "pyvrp.plotting.plot_time_windows": [[2, "module-pyvrp.plotting.plot_time_windows"]], "client (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.Client"]], "costevaluator (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.CostEvaluator"]], "edge (class in pyvrp.model)": [[3, "pyvrp.Model.Edge"]], "emptysolutionwarning": [[3, "pyvrp.exceptions.EmptySolutionWarning"]], "geneticalgorithm (class in pyvrp.geneticalgorithm)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithm"]], "geneticalgorithmparams (class in pyvrp.geneticalgorithm)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithmParams"]], "model (class in pyvrp.model)": [[3, "pyvrp.Model.Model"]], "penaltymanager (class in pyvrp.penaltymanager)": [[3, "pyvrp.PenaltyManager.PenaltyManager"]], "penaltyparams (class in pyvrp.penaltymanager)": [[3, "pyvrp.PenaltyManager.PenaltyParams"]], "population (class in pyvrp.population)": [[3, "pyvrp.Population.Population"]], "populationparams (class in pyvrp.population)": [[3, "pyvrp.Population.PopulationParams"]], "problemdata (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.ProblemData"]], "randomnumbergenerator (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.RandomNumberGenerator"]], "result (class in pyvrp.result)": [[3, "pyvrp.Result.Result"]], "route (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.Route"]], "scalingwarning": [[3, "pyvrp.exceptions.ScalingWarning"]], "solution (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.Solution"]], "statistics (class in pyvrp.statistics)": [[3, "pyvrp.Statistics.Statistics"]], "vehicletype (class in pyvrp._pyvrp)": [[3, "pyvrp._pyvrp.VehicleType"]], "__call__() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.__call__"]], "__iter__() (population method)": [[3, "pyvrp.Population.Population.__iter__"]], "__len__() (population method)": [[3, "pyvrp.Population.Population.__len__"]], "add() (population method)": [[3, "pyvrp.Population.Population.add"]], "add_client() (model method)": [[3, "pyvrp.Model.Model.add_client"]], "add_depot() (model method)": [[3, "pyvrp.Model.Model.add_depot"]], "add_edge() (model method)": [[3, "pyvrp.Model.Model.add_edge"]], "add_vehicle_type() (model method)": [[3, "pyvrp.Model.Model.add_vehicle_type"]], "centroid() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.centroid"]], "centroid() (route method)": [[3, "pyvrp._pyvrp.Route.centroid"]], "clear() (population method)": [[3, "pyvrp.Population.Population.clear"]], "client() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.client"]], "collect_from() (statistics method)": [[3, "pyvrp.Statistics.Statistics.collect_from"]], "cost() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.cost"]], "cost() (result method)": [[3, "pyvrp.Result.Result.cost"]], "data() (model method)": [[3, "pyvrp.Model.Model.data"]], "demand() (route method)": [[3, "pyvrp._pyvrp.Route.demand"]], "dist() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.dist"]], "distance() (route method)": [[3, "pyvrp._pyvrp.Route.distance"]], "distance() (solution method)": [[3, "pyvrp._pyvrp.Solution.distance"]], "duration() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.duration"]], "duration() (route method)": [[3, "pyvrp._pyvrp.Route.duration"]], "end_time() (route method)": [[3, "pyvrp._pyvrp.Route.end_time"]], "excess_load() (route method)": [[3, "pyvrp._pyvrp.Route.excess_load"]], "excess_load() (solution method)": [[3, "pyvrp._pyvrp.Solution.excess_load"]], "from_csv() (statistics class method)": [[3, "pyvrp.Statistics.Statistics.from_csv"]], "from_data() (model class method)": [[3, "pyvrp.Model.Model.from_data"]], "get_booster_cost_evaluator() (penaltymanager method)": [[3, "pyvrp.PenaltyManager.PenaltyManager.get_booster_cost_evaluator"]], "get_cost_evaluator() (penaltymanager method)": [[3, "pyvrp.PenaltyManager.PenaltyManager.get_cost_evaluator"]], "get_neighbours() (solution method)": [[3, "pyvrp._pyvrp.Solution.get_neighbours"]], "get_routes() (solution method)": [[3, "pyvrp._pyvrp.Solution.get_routes"]], "get_tournament() (population method)": [[3, "pyvrp.Population.Population.get_tournament"]], "has_excess_load() (route method)": [[3, "pyvrp._pyvrp.Route.has_excess_load"]], "has_excess_load() (solution method)": [[3, "pyvrp._pyvrp.Solution.has_excess_load"]], "has_time_warp() (route method)": [[3, "pyvrp._pyvrp.Route.has_time_warp"]], "has_time_warp() (solution method)": [[3, "pyvrp._pyvrp.Solution.has_time_warp"]], "is_complete() (solution method)": [[3, "pyvrp._pyvrp.Solution.is_complete"]], "is_feasible() (result method)": [[3, "pyvrp.Result.Result.is_feasible"]], "is_feasible() (route method)": [[3, "pyvrp._pyvrp.Route.is_feasible"]], "is_feasible() (solution method)": [[3, "pyvrp._pyvrp.Solution.is_feasible"]], "load_penalty() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.load_penalty"]], "locations (model property)": [[3, "pyvrp.Model.Model.locations"]], "make_random() (solution method)": [[3, "pyvrp._pyvrp.Solution.make_random"]], "max() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.max"]], "min() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.min"]], "num_clients (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_clients"]], "num_clients() (solution method)": [[3, "pyvrp._pyvrp.Solution.num_clients"]], "num_feasible() (population method)": [[3, "pyvrp.Population.Population.num_feasible"]], "num_infeasible() (population method)": [[3, "pyvrp.Population.Population.num_infeasible"]], "num_routes() (solution method)": [[3, "pyvrp._pyvrp.Solution.num_routes"]], "num_vehicle_types (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_vehicle_types"]], "num_vehicles (problemdata property)": [[3, "pyvrp._pyvrp.ProblemData.num_vehicles"]], "penalised_cost() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.penalised_cost"]], "prizes() (route method)": [[3, "pyvrp._pyvrp.Route.prizes"]], "prizes() (solution method)": [[3, "pyvrp._pyvrp.Solution.prizes"]], "pyvrp": [[3, "module-pyvrp"]], "pyvrp.geneticalgorithm": [[3, "module-pyvrp.GeneticAlgorithm"]], "pyvrp.model": [[3, "module-pyvrp.Model"]], "pyvrp.penaltymanager": [[3, "module-pyvrp.PenaltyManager"]], "pyvrp.population": [[3, "module-pyvrp.Population"]], "pyvrp.result": [[3, "module-pyvrp.Result"]], "pyvrp.statistics": [[3, "module-pyvrp.Statistics"]], "pyvrp._pyvrp": [[3, "module-pyvrp._pyvrp"]], "pyvrp.exceptions": [[3, "module-pyvrp.exceptions"]], "pyvrp.read": [[3, "module-pyvrp.read"]], "pyvrp.show_versions": [[3, "module-pyvrp.show_versions"]], "rand() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.rand"]], "randint() (randomnumbergenerator method)": [[3, "pyvrp._pyvrp.RandomNumberGenerator.randint"]], "read() (in module pyvrp.read)": [[3, "pyvrp.read.read"]], "read_solution() (in module pyvrp.read)": [[3, "pyvrp.read.read_solution"]], "register_load_feasible() (penaltymanager method)": [[3, "pyvrp.PenaltyManager.PenaltyManager.register_load_feasible"]], "register_time_feasible() (penaltymanager method)": [[3, "pyvrp.PenaltyManager.PenaltyManager.register_time_feasible"]], "release_time() (route method)": [[3, "pyvrp._pyvrp.Route.release_time"]], "run() (geneticalgorithm method)": [[3, "pyvrp.GeneticAlgorithm.GeneticAlgorithm.run"]], "select() (population method)": [[3, "pyvrp.Population.Population.select"]], "service_duration() (route method)": [[3, "pyvrp._pyvrp.Route.service_duration"]], "show_versions() (in module pyvrp.show_versions)": [[3, "pyvrp.show_versions.show_versions"]], "slack() (route method)": [[3, "pyvrp._pyvrp.Route.slack"]], "solve() (model method)": [[3, "pyvrp.Model.Model.solve"]], "start_time() (route method)": [[3, "pyvrp._pyvrp.Route.start_time"]], "time_warp() (route method)": [[3, "pyvrp._pyvrp.Route.time_warp"]], "time_warp() (solution method)": [[3, "pyvrp._pyvrp.Solution.time_warp"]], "to_csv() (statistics method)": [[3, "pyvrp.Statistics.Statistics.to_csv"]], "travel_duration() (route method)": [[3, "pyvrp._pyvrp.Route.travel_duration"]], "tw_penalty() (costevaluator method)": [[3, "pyvrp._pyvrp.CostEvaluator.tw_penalty"]], "uncollected_prizes() (solution method)": [[3, "pyvrp._pyvrp.Solution.uncollected_prizes"]], "vehicle_type() (problemdata method)": [[3, "pyvrp._pyvrp.ProblemData.vehicle_type"]], "vehicle_type() (route method)": [[3, "pyvrp._pyvrp.Route.vehicle_type"]], "vehicle_types (model property)": [[3, "pyvrp.Model.Model.vehicle_types"]], "visits() (route method)": [[3, "pyvrp._pyvrp.Route.visits"]], "wait_duration() (route method)": [[3, "pyvrp._pyvrp.Route.wait_duration"]], "exchange10 (class in pyvrp.search._search)": [[4, "pyvrp.search._search.Exchange10"]], "exchange11 (class in pyvrp.search._search)": [[4, "pyvrp.search._search.Exchange11"]], "exchange20 (class in pyvrp.search._search)": [[4, "pyvrp.search._search.Exchange20"]], "exchange21 (class in pyvrp.search._search)": [[4, "pyvrp.search._search.Exchange21"]], "exchange22 (class in pyvrp.search._search)": [[4, "pyvrp.search._search.Exchange22"]], "exchange30 (class in pyvrp.search._search)": [[4, "pyvrp.search._search.Exchange30"]], "exchange31 (class in pyvrp.search._search)": [[4, "pyvrp.search._search.Exchange31"]], "exchange32 (class in pyvrp.search._search)": [[4, "pyvrp.search._search.Exchange32"]], "exchange33 (class in pyvrp.search._search)": [[4, "pyvrp.search._search.Exchange33"]], "localsearch (class in pyvrp.search.localsearch)": [[4, "pyvrp.search.LocalSearch.LocalSearch"]], "movetwoclientsreversed (class in pyvrp.search._search)": [[4, "pyvrp.search._search.MoveTwoClientsReversed"]], "neighbourhoodparams (class in pyvrp.search.neighbourhood)": [[4, "pyvrp.search.neighbourhood.NeighbourhoodParams"]], "nodeoperator (class in pyvrp.search._search)": [[4, "pyvrp.search._search.NodeOperator"]], "relocatestar (class in pyvrp.search._search)": [[4, "pyvrp.search._search.RelocateStar"]], "routeoperator (class in pyvrp.search._search)": [[4, "pyvrp.search._search.RouteOperator"]], "searchmethod (class in pyvrp.search.searchmethod)": [[4, "pyvrp.search.SearchMethod.SearchMethod"]], "swapstar (class in pyvrp.search._search)": [[4, "pyvrp.search._search.SwapStar"]], "twoopt (class in pyvrp.search._search)": [[4, "pyvrp.search._search.TwoOpt"]], "add_node_operator() (localsearch method)": [[4, "pyvrp.search.LocalSearch.LocalSearch.add_node_operator"]], "add_route_operator() (localsearch method)": [[4, "pyvrp.search.LocalSearch.LocalSearch.add_route_operator"]], "compute_neighbours() (in module pyvrp.search.neighbourhood)": [[4, "pyvrp.search.neighbourhood.compute_neighbours"]], "get_neighbours() (localsearch method)": [[4, "pyvrp.search.LocalSearch.LocalSearch.get_neighbours"]], "intensify() (localsearch method)": [[4, "pyvrp.search.LocalSearch.LocalSearch.intensify"]], "pyvrp.search": [[4, "module-pyvrp.search"]], "pyvrp.search.localsearch": [[4, "module-pyvrp.search.LocalSearch"]], "pyvrp.search.searchmethod": [[4, "module-pyvrp.search.SearchMethod"]], "pyvrp.search._search": [[4, "module-pyvrp.search._search"]], "pyvrp.search.neighbourhood": [[4, "module-pyvrp.search.neighbourhood"]], "search() (localsearch method)": [[4, "pyvrp.search.LocalSearch.LocalSearch.search"]], "set_neighbours() (localsearch method)": [[4, "pyvrp.search.LocalSearch.LocalSearch.set_neighbours"]], "maxiterations (class in pyvrp.stop.maxiterations)": [[5, "pyvrp.stop.MaxIterations.MaxIterations"]], "maxruntime (class in pyvrp.stop.maxruntime)": [[5, "pyvrp.stop.MaxRuntime.MaxRuntime"]], "noimprovement (class in pyvrp.stop.noimprovement)": [[5, "pyvrp.stop.NoImprovement.NoImprovement"]], "stoppingcriterion (class in pyvrp.stop.stoppingcriterion)": [[5, "pyvrp.stop.StoppingCriterion.StoppingCriterion"]], "timednoimprovement (class in pyvrp.stop.timednoimprovement)": [[5, "pyvrp.stop.TimedNoImprovement.TimedNoImprovement"]], "pyvrp.stop": [[5, "module-pyvrp.stop"]], "pyvrp.stop.maxiterations": [[5, "module-pyvrp.stop.MaxIterations"]], "pyvrp.stop.maxruntime": [[5, "module-pyvrp.stop.MaxRuntime"]], "pyvrp.stop.noimprovement": [[5, "module-pyvrp.stop.NoImprovement"]], "pyvrp.stop.stoppingcriterion": [[5, "module-pyvrp.stop.StoppingCriterion"]], "pyvrp.stop.timednoimprovement": [[5, "module-pyvrp.stop.TimedNoImprovement"]]}, "docurls": ["api/crossover.html", "api/diversity.html", "api/plotting.html", "api/pyvrp.html", "api/search.html", "api/stop.html", "dev/benchmarking.html", "dev/contributing.html", "examples/basic_vrps.html", "examples/quick_tutorial.html", "examples/using_pyvrp_components.html", "index.html", "setup/benchmarks.html", "setup/getting_help.html", "setup/installation.html", "setup/introduction_to_hgs.html", "setup/introduction_to_vrp.html"]})